#name: Java CI with Gradle
#
#on:
#  push:
#    branches: [ "main" ]
#
#permissions:
#  contents: read
#
#jobs:
#  # Spring Boot 애플리케이션을 빌드하여 도커허브에 푸시하는 과정
#  build-docker-image:
#
#    runs-on: ubuntu-latest
#
#    steps:
#    - uses: actions/checkout@v3
#    - name: Set up JDK 11
#      uses: actions/setup-java@v3
#      with:
#        java-version: '11'
#        distribution: 'temurin'
##    - name: Build with Gradle
##      uses: gradle/gradle-build-action@bd5760595778326ba7f1441bcf7e88b49de61a25 # v2.6.0
##      with:
##        arguments: clean bootJar
#      # gradle 캐싱
#    - name: Gradle Caching
#      uses: actions/cache@v3
#      with:
#        path: |
#          ~/.gradle/caches
#          ~/.gradle/wrapper
#        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
#        restore-keys: |
#          ${{ runner.os }}-gradle-
#
#    # gradlew에 권한 부여
#    - name: Grant execute permission for gradles
#      run: chmod +x gradlew
#
#    - name: Build with Gradle
#      run: ./gradlew bootJar
#
#      # Docker 이미지 빌드
#    - name: docker image build & push
#      run: |
#        docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
#        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo .
#        docker push ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo
##      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo .
#    - name: docker deploy
#      uses: appleboy/ssh-action@master
#      with:
#        host: ${{ secrets.HOST_PROD }}
#        username: ${{ secrets.USERNAME }}
##        password: ${{ secrets.PASSWORD }}
#        key: ${{ secrets.PRIVATE_KEY }}
#        script: |
#          cd ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo
#          sudo docker rm -f $(docker ps -qa)
#          sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo
#          docker-compose up -d
#          docker image prune -f




#          sudo docker run -d --name github-actions-demo -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo
      # DockerHub 로그인
#    - name: docker login
#      uses: docker/login-action@v2
#      with:
#        username: ${{ secrets.DOCKERHUB_USERNAME }}
#        password: ${{ secrets.DOCKERHUB_PASSWORD }}
#
#      # Docker Hub 이미지 푸시
#    - name: docker Hub push
#      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo
#  # 위 과정에서 푸시한 이미지를 ec2에서 풀받아서 실행시키는 과정
#  run-docker-image-on-ec2:
#    # build-docker-image (위)과정이 완료되어야 실행됩니다.
#    needs: build-docker-image
#    runs-on: self-hosted
#
#    steps:
#      # 1. 최신 이미지를 풀받습니다.
#      - name: docker pull
#        run: sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo
#
#      # 2. 기존의 컨테이너를 중지시킵니다.
#      - name: docker stop container
#        run: sudo docker stop $(sudo docker ps -q) 2>/dev/null || true
#
#      # 3. 최신 이미지를 컨테이너화하여 실행시킵니다.
#      - name: docker run new container
#        run: docker-compose up -d
##        run: sudo docker run --name github-actions-demo --rm -d -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo
#      # 4. 미사용 이미지를 정리합니다.
#      - name: delete old docker image
#        run: sudo docker system prune -f

